{"version":3,"sources":["Timer.js","serviceWorker.js","index.js"],"names":["Timer","useState","segundos","setSegundos","activo","setActivo","tipo","setTipo","button","setButton","myRef","useRef","reset","document","getElementById","value","useEffect","intervalo","setInterval","clearInterval","className","onClick","id","type","ref","onChange","current","length","placeholder","autoComplete","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAuFeA,EApFD,WACZ,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,YAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA4BN,mBAAS,4BAArC,mBAAOO,EAAP,KAAeC,EAAf,KACMC,EAAQC,iBAAO,MAMrB,SAASC,KACPT,EAAY,GACZE,GAAU,GACG,qBAATC,KACYO,SAASC,eAAe,aAC9BC,MAAQ,IA+CpB,OA1BAC,qBAAU,WACR,IAAIC,EAAY,KAsBhB,OArBIb,GAAmB,aAATE,IACZW,EAAYC,aAAY,WACtBf,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OAClC,MAGDE,GAAmB,qBAATE,IACZW,EAAYC,aAAY,WACtBf,GAAY,SAAAD,GAAQ,OAAIA,EAAW,OAClC,MAGAE,GAAuB,IAAbF,GAA2B,aAATI,GAC/Ba,cAAcF,GAGC,IAAbf,GAA2B,qBAATI,IACpBM,IACAO,cAAcF,IAGT,kBAAME,cAAcF,MAC1B,CAACb,EAAQF,EAAUI,IAGpB,sBAAKc,UAAU,MAAf,UACE,mCAAMd,EAAN,OACA,qBAAKc,UAAU,OAAf,SACE,mCAAMlB,EAAN,SAEF,uBACA,sBAAKkB,UAAU,MAAf,UACE,wBAAQA,UAAS,wCAAmChB,EAAS,SAAW,YAAciB,QAhE5F,WACEhB,GAAWD,IA+DP,SACGA,EAAS,QAAU,WAEtB,wBAAQgB,UAAU,mBAAmBC,QAAST,EAA9C,sBAEQ,qBAATN,GACC,uBAAOgB,GAAG,YAAYC,KAAK,SAASC,IAAKd,EAAOe,SA9CtD,WAEE,IAAID,EAAMd,EAAMgB,QAAQX,MACrBS,EAAIG,QAAU,GAAGxB,EAAYqB,IA2C8CI,YAAY,sBAAsBC,aAAa,QAE3H,yBAAQT,UAAU,aAAaC,QA3DnC,WACe,aAATf,IACFC,EAAS,oBACTE,EAAU,qBAEC,qBAATH,IACFC,EAAQ,YACRE,EAAU,8BAoDV,cAAsDD,EAAtD,WCtEcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,cAAC,EAAD,IAAWvB,SAASC,eAAe,SD4H7C,kBAAmBuB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fc6c3094.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Timer.css';\n\nconst Timer = () => {\n  const [segundos, setSegundos] = useState(0);\n  const [activo, setActivo] = useState(false);\n  const [tipo, setTipo] = useState('Contador');\n  const [button, setButton] = useState('Pasar a Cuenta Regresiva');\n  const myRef = useRef(null);\n\n  function toggle() {\n    setActivo(!activo);\n  }\n\n  function reset() {\n    setSegundos(0);\n    setActivo(false);\n    if (tipo === 'Cuenta Regresiva') {\n      var inputsg = document.getElementById(\"regresiva\");\n      inputsg.value = \"\";\n    }\n  }\n\n  function cambioTipo() {\n    if (tipo === 'Contador') {\n      setTipo ('Cuenta Regresiva'); \n      setButton('Pasar a Contador');\n    } \n    if (tipo === 'Cuenta Regresiva') {\n      setTipo('Contador'); \n      setButton('Pasar a Cuenta Regresiva');\n    }\n  }\n\n  function agregaSegundos() {\n    // `current` apunta al elemento input.\n    let ref = myRef.current.value\n    if(ref.length <= 5) setSegundos(ref);\n  }\n\n  useEffect(() => {\n    let intervalo = null;\n    if (activo && tipo === 'Contador') {\n      intervalo = setInterval(() => {\n        setSegundos(segundos => segundos + 1);\n      }, 1000);\n    }\n\n    if (activo && tipo === 'Cuenta Regresiva') {\n      intervalo = setInterval(() => {\n        setSegundos(segundos => segundos - 1);\n      }, 1000);\n    }\n\n    if (!activo && segundos !== 0 && tipo === 'Contador') {\n      clearInterval(intervalo);\n    }\n\n    if (segundos === 0 && tipo === 'Cuenta Regresiva') {\n      reset();\n      clearInterval(intervalo);\n    }\n\n    return () => clearInterval(intervalo);\n  }, [activo, segundos, tipo]);\n\n  return (\n    <div className=\"app\">\n      <h2> {tipo} </h2>\n      <div className=\"time\">\n        <h2> {segundos} </h2>\n      </div>\n      <br></br>\n      <div className=\"row\">\n        <button className={`button-primary button-primary-${activo ? 'active' : 'inactive'}`} onClick={toggle}>\n          {activo ? 'Pausa' : 'Inicio'}\n        </button>\n        <button className=\"button-secundary\" onClick={reset}>Reset</button>\n      </div>\n      {tipo === 'Cuenta Regresiva' &&\n        <input id=\"regresiva\" type=\"number\" ref={myRef} onChange={agregaSegundos} placeholder=\"Ingresa Segundos...\" autoComplete=\"off\"/>   \n      } \n      <button className=\"switbutton\" onClick={cambioTipo}> {button} </button>\n    </div>\n  );\n};\n\nexport default Timer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './Timer';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Timer />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}